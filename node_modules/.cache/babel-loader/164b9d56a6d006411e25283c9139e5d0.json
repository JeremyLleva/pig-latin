{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable 'userInput' will contain the text input from the user\n      // no need to change this variable\n      let userInput = this.state.phrase; // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n      // no need to change this variable\n\n      let translatedWordsArray = []; // taking the user input and spliting the text into an array of words\n\n      let splitUserInput = userInput.toLowerCase().split(\" \"); // now that we have an array of words, we can map over the array and access each word\n\n      splitUserInput.map(currentWord => {\n        // ACTION ITEM: use 'currentWord' as a starting point for your code\n        let vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]; //if vowel is at start\n\n        if (vowel.includes(currentWord[0])) {\n          // currentWord = currentWord.slice(1, currentWord.length) + currentWord[0] + \"way\";\n          currentWord += \"way\";\n        } //if no vowels but a y\n        else if (!currentWord.includes(\"a\") && !currentWord.includes(\"e\") && !currentWord.includes(\"i\") && !currentWord.includes(\"o\") && !currentWord.includes(\"u\")) {\n            for (let i = 0; i < currentWord.length; i++) {\n              if (currentWord[i] === \"y\") {\n                currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                break;\n              }\n            }\n          } else {\n            console.log(\"test\" + currentWord);\n\n            for (let i = 0; i < currentWord.length; i++) {\n              if (\"q\".includes(currentWord[i])) {\n                if (\"u\".includes(currentWord[i + 1])) {\n                  currentWord = currentWord.slice(i + 2, currentWord.length) + currentWord.slice(0, i + 2) + \"ay\";\n                  break;\n                }\n              } else if (vowel.includes(currentWord[i])) {\n                currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                break;\n              }\n            }\n          } // your code here!\n        // Remember: console.log is your friend :)\n        // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n\n\n        return translatedWordsArray.push(currentWord);\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \"); // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      }); // done!\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents react from refreshing the page unnecessarily\n      // no need to modify this method\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleChange = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      // no need to modify this method\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: 'through every squeal queen fry',\n        phraseTranslated: 'This is where your translated sentence will appear.'\n      });\n    };\n\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"\",\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    };\n  } // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"div\", {\n      id: \"pigImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\",\n      alt: \"pig with butcher cut names in pig latin\",\n      id: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputPhrase\",\n      place: \"Please type words here\",\n      onChange: this.handleChange,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Coded by Connor Cook, Jeremy Lleva, Art Ortega\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learn/Desktop/Challenge-Pig-Latin-React/src/App.js"],"names":["React","App","Component","constructor","props","myPigLatinCodeHere","userInput","state","phrase","translatedWordsArray","splitUserInput","toLowerCase","split","map","currentWord","vowel","includes","i","length","slice","console","log","push","translatedWords","join","setState","phraseTranslated","setUpPreventDefault","e","preventDefault","handleChange","target","value","restartGame","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"\",\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    }\n  }\n\n  // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n  myPigLatinCodeHere = () => {\n    // the variable 'userInput' will contain the text input from the user\n    // no need to change this variable\n    let userInput = this.state.phrase\n\n    // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n    // no need to change this variable\n    let translatedWordsArray = []\n\n    // taking the user input and spliting the text into an array of words\n    let splitUserInput = userInput.toLowerCase().split(\" \")\n\n    // now that we have an array of words, we can map over the array and access each word\n    splitUserInput.map(currentWord => {\n      // ACTION ITEM: use 'currentWord' as a starting point for your code\n      let vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n      //if vowel is at start\n      if (vowel.includes(currentWord[0])){\n          // currentWord = currentWord.slice(1, currentWord.length) + currentWord[0] + \"way\";\n          currentWord += \"way\";\n      }\n      //if no vowels but a y\n      else if(!currentWord.includes(\"a\") && !currentWord.includes(\"e\") && !currentWord.includes(\"i\") && !currentWord.includes(\"o\") && !currentWord.includes(\"u\"))\n      {\n          for(let i = 0; i < currentWord.length; i++){\n              if(currentWord[i] === \"y\"){\n                  currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                  break;\n              }\n          }\n      } else {\n          console.log(\"test\"+currentWord)\n          for(let i=0;i<currentWord.length;i++){\n              if(\"q\".includes(currentWord[i])){\n                  if(\"u\".includes(currentWord[i+1])){\n                      currentWord = currentWord.slice(i+2, currentWord.length) + currentWord.slice(0, i+2) + \"ay\"\n                      break;\n                  }\n              }\n              else if(vowel.includes(currentWord[i])){\n                  currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\"\n                  break;\n              }\n          }\n      }\n\n\n      // your code here!\n\n      // Remember: console.log is your friend :)\n\n\n      // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWordsArray.push(currentWord)\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n\n    // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords })\n    // done!\n  }\n\n  setUpPreventDefault = (e) => {\n    // this method prevents react from refreshing the page unnecessarily\n    // no need to modify this method\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  handleChange = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    // no need to modify this method\n    this.setState({ phrase: e.target.value })\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: 'through every squeal queen fry',\n      phraseTranslated: 'This is where your translated sentence will appear.'\n    })\n  }\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return (\n      <div>\n        <h1>Pig Latin Translator</h1>\n          <div id=\"pigImage\">\n            <img\n              src=\"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\"\n              alt=\"pig with butcher cut names in pig latin\"\n              id=\"butcherPig\"\n            />\n          </div>\n          <div className=\"box\">\n            <h4>Enter phrase to be translated:</h4>\n            <div className=\"info\">\n            {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n              <input\n                id=\"inputPhrase\"\n                place=\"Please type words here\"\n                onChange={ this.handleChange }\n                value={ this.state.phrase }\n              />\n              <br />\n              {/* button that called the setUpPreventDefault method */}\n              <button onClick={ this.setUpPreventDefault }>Submit</button>\n              {/* button that resets the game */}\n              <button onClick={ this.restartGame }>Clear</button>\n            </div>\n            {/* where the translated phrase will display */}\n            <p>{ this.state.phraseTranslated }</p>\n          </div>\n        <footer>\n          Coded by Connor Cook, Jeremy Lleva, Art Ortega\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}