{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/pig-latin/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable 'userInput' will contain the text input from the user\n      // no need to change this variable\n      let userInput = this.state.phrase; // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n      // no need to change this variable\n\n      let translatedWordsArray = []; // taking the user input and spliting the text into an array of words\n\n      let splitUserInput = userInput.toLowerCase().split(\" \"); // now that we have an array of words, we can map over the array and access each word\n\n      splitUserInput.map(currentWord => {\n        // ACTION ITEM: use 'currentWord' as a starting point for your code\n        let vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let symbol = \"\";\n\n        if (currentWord[currentWord.length - 1] == \".\" || currentWord[currentWord.length - 1] == \"?\" || currentWord[currentWord.length - 1] == \"!\") {\n          symbol = currentWord[currentWord.length - 1];\n          currentWord = currentWord.slice(0, currentWord.length - 1);\n        } //if vowel is at start\n\n\n        if (vowel.includes(currentWord[0])) {\n          // currentWord = currentWord.slice(1, currentWord.length) + currentWord[0] + \"way\";\n          return translatedWordsArray.push(currentWord + symbol);\n        } //if no vowels but a y\n        // else if(!currentWord.includes(\"a\") &&\n        //       !currentWord.includes(\"e\") &&\n        //       !currentWord.includes(\"i\") &&\n        //       !currentWord.includes(\"o\") &&\n        //       !currentWord.includes(\"u\"))\n        // {\n        //     for(let i = 0; i < currentWord.length; i++){\n        //         if(currentWord[i] === \"y\"){\n        //             currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n        //             return translatedWordsArray.push(currentWord + symbol);\n        //         }\n        //     }\n        // } else {\n        //     //console.log(\"test\"+currentWord)\n        //     for(let i=0;i<currentWord.length;i++){\n        //         if(\"q\".includes(currentWord[i])){\n        //             if(\"u\".includes(currentWord[i+1])){\n        //                 currentWord = currentWord.slice(i+2, currentWord.length) + currentWord.slice(0, i+2) + \"ay\"\n        //                 return translatedWordsArray.push(currentWord + symbol);\n        //             }\n        //         }\n        //         else if(vowel.includes(currentWord[i])){\n        //             currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\"\n        //             return translatedWordsArray.push(currentWord + symbol);\n        //         }\n        //     }\n        // }\n        else {\n            for (let i = 0; i < currentWord.length; i++) {\n              if (currentWord[i] === \"y\" && i != 0) {\n                currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                return translatedWordsArray.push(currentWord + symbol);\n              } else if (\"q\".includes(currentWord[i])) {\n                if (\"u\".includes(currentWord[i + 1])) {\n                  currentWord = currentWord.slice(i + 2, currentWord.length) + currentWord.slice(0, i + 2) + \"ay\";\n                  return translatedWordsArray.push(currentWord + symbol);\n                }\n              } else if (vowel.includes(currentWord[i])) {\n                currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                return translatedWordsArray.push(currentWord + symbol);\n              }\n            }\n          } // your code here!\n        // Remember: console.log is your friend :)\n        // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n\n\n        return translatedWordsArray.push(currentWord);\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \"); // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      }); // done!\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents react from refreshing the page unnecessarily\n      // no need to modify this method\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleChange = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      // no need to modify this method\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: '',\n        phraseTranslated: ''\n      });\n    };\n\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"\",\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: ''\n    };\n  } // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"div\", {\n      id: \"pigImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\",\n      alt: \"pig with butcher cut names in pig latin\",\n      id: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"inputPhrase\",\n      placeholder: \"Please type words here\",\n      onChange: this.handleChange,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Coded by Connor Cook, Jeremy Lleva, Art Ortega\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learn/Desktop/pig-latin/src/App.js"],"names":["React","App","Component","constructor","props","myPigLatinCodeHere","userInput","state","phrase","translatedWordsArray","splitUserInput","toLowerCase","split","map","currentWord","vowel","symbol","length","slice","includes","push","i","translatedWords","join","setState","phraseTranslated","setUpPreventDefault","e","preventDefault","handleChange","target","value","restartGame","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // 'phrase' is the text entered by the user - right now there are some test words hard coded to make the process of testing your code a bit faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"\",\n      // 'phraseTranslated' is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the 'submit' button\n      phraseTranslated: ''\n    }\n  }\n\n  // The 'myPigLatinCodeHere' function is where you will put your logic to convert the sentence entered by the user to Pig Latin.\n\n  myPigLatinCodeHere = () => {\n    // the variable 'userInput' will contain the text input from the user\n    // no need to change this variable\n    let userInput = this.state.phrase\n\n    // as you modify and create Pig Latin-ified words, push them into 'translatedWordsArray'\n    // no need to change this variable\n    let translatedWordsArray = []\n    // taking the user input and spliting the text into an array of words\n    let splitUserInput = userInput.toLowerCase().split(\" \")\n\n    // now that we have an array of words, we can map over the array and access each word\n    splitUserInput.map(currentWord => {\n      // ACTION ITEM: use 'currentWord' as a starting point for your code\n      let vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n      let symbol = \"\"\n      if(currentWord[currentWord.length-1] == \".\"\n          || currentWord[currentWord.length-1] == \"?\"\n          || currentWord[currentWord.length-1] == \"!\"){\n\n              symbol = currentWord[currentWord.length-1]\n              currentWord = currentWord.slice(0, currentWord.length-1)\n          }\n\n      //if vowel is at start\n      if (vowel.includes(currentWord[0])){\n          // currentWord = currentWord.slice(1, currentWord.length) + currentWord[0] + \"way\";\n          return translatedWordsArray.push(currentWord + symbol);\n      }\n      //if no vowels but a y\n      // else if(!currentWord.includes(\"a\") &&\n      //       !currentWord.includes(\"e\") &&\n      //       !currentWord.includes(\"i\") &&\n      //       !currentWord.includes(\"o\") &&\n      //       !currentWord.includes(\"u\"))\n      // {\n      //     for(let i = 0; i < currentWord.length; i++){\n      //         if(currentWord[i] === \"y\"){\n      //             currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n      //             return translatedWordsArray.push(currentWord + symbol);\n      //         }\n      //     }\n      // } else {\n      //     //console.log(\"test\"+currentWord)\n      //     for(let i=0;i<currentWord.length;i++){\n      //         if(\"q\".includes(currentWord[i])){\n      //             if(\"u\".includes(currentWord[i+1])){\n      //                 currentWord = currentWord.slice(i+2, currentWord.length) + currentWord.slice(0, i+2) + \"ay\"\n      //                 return translatedWordsArray.push(currentWord + symbol);\n      //             }\n      //         }\n      //         else if(vowel.includes(currentWord[i])){\n      //             currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\"\n      //             return translatedWordsArray.push(currentWord + symbol);\n      //         }\n      //     }\n      // }\n      else {\n          for(let i = 0; i < currentWord.length; i++){\n              if(currentWord[i] === \"y\" && i != 0){\n                  currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\";\n                  return translatedWordsArray.push(currentWord + symbol);\n              }\n              else if(\"q\".includes(currentWord[i])){\n                  if(\"u\".includes(currentWord[i+1])){\n                      currentWord = currentWord.slice(i+2, currentWord.length) + currentWord.slice(0, i+2) + \"ay\"\n                      return translatedWordsArray.push(currentWord + symbol);\n                  }\n              }\n              else if(vowel.includes(currentWord[i])){\n                  currentWord = currentWord.slice(i, currentWord.length) + currentWord.slice(0, i) + \"ay\"\n                  return translatedWordsArray.push(currentWord + symbol);\n              }\n          }\n      }\n\n\n      // your code here!\n\n      // Remember: console.log is your friend :)\n\n\n      // ACTION ITEM: change the value of currentWord in the push method to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWordsArray.push(currentWord)\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n\n    // the setState method will take your information from 'translatedWords' and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({ phraseTranslated: translatedWords })\n    // done!\n  }\n\n  setUpPreventDefault = (e) => {\n    // this method prevents react from refreshing the page unnecessarily\n    // no need to modify this method\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  handleChange = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    // no need to modify this method\n    this.setState({ phrase: e.target.value })\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: '',\n      phraseTranslated: ''\n    })\n  }\n\n  render() {\n    // the render method is where we put information on the page\n    // inside the return is all our JSX tags\n    return (\n      <div>\n        <h1>Pig Latin Translator</h1>\n          <div id=\"pigImage\">\n            <img\n              src=\"https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\"\n              alt=\"pig with butcher cut names in pig latin\"\n              id=\"butcherPig\"\n            />\n          </div>\n          <div className=\"box\">\n            <h4>Enter phrase to be translated:</h4>\n            <div className=\"info\">\n            {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n              <input\n                id=\"inputPhrase\"\n                placeholder=\"Please type words here\"\n                onChange={ this.handleChange }\n                value={ this.state.phrase }\n              />\n              <br />\n              {/* button that called the setUpPreventDefault method */}\n              <button onClick={ this.setUpPreventDefault }>Submit</button>\n              {/* button that resets the game */}\n              <button onClick={ this.restartGame }>Clear</button>\n            </div>\n            {/* where the translated phrase will display */}\n            <p>{ this.state.phraseTranslated }</p>\n          </div>\n        <footer>\n          Coded by Connor Cook, Jeremy Lleva, Art Ortega\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}